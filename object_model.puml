@startuml
package Accounts {
    interface IDepositable {
    + deposit(amount: float) -> float
    }

    interface IWithdrawable {
    + withdraw(amount: float) -> float
    }

    abstract class AAccount {
    + amount: float
    + account_number: String
    }

    IBasicAccount <-- AAccount

    interface IInterest {
    + compound(t: timestamp) -> float
    }

    abstract class AInterestAccount {
    + rate: double
    }

    IInterest <-- AInterestAccount
    AAccount <|-- AInterestAccount

    abstract class ACreditAccount {
    + limit: float
    }

    AInterestAccount <|-- ACreditAccount

    abstract class ASavings {
    }

    AInterestAccount <|-- ASavings

    abstract class AChecking {
    + routing_number: String
    }

    AAccount <|-- AChecking

    interface IBasicAccount {
    }

    IDepositable <|-- IBasicAccount
    IWithdrawable <|-- IBasicAccount

    interface IAccountable {
    + pay(acts: IBasicAccount)
    }
}

package Expenses {
    abstract class AReceipt {
    + amount: float
    + store: Enum
    + account: String
    }

    IAccountable <-- AReceipt

    abstract class ATransfer {
    + name: string
    + source: string
    + target: string
    + amount: float
    }

    IAccountable <-- ATransfer
}

package Income {
    abstract class AIncome {
    + account: String
    + amount: float
    + job: Enum
    }

    IAccountable <-- AIncome
}

package Application {
    enum AccountTypes {
        CHECKING
        SAVINGS
        CREDIT
        EXPENSE
    }

    class SimpleChecking
    AChecking <|-- SimpleChecking

    class SimpleSavings
    ASavings <|-- SimpleSavings

    class SimpleCreditCard
    ACreditAccount <|-- SimpleCreditCard

    class SimpleLoan
    ACreditAccount <|-- SimpleLoan

    class MonthlyExpense
    ATransfer <|-- MonthlyExpense

    class Receipt
    AReceipt <|-- Receipt

    class Paycheck
    AIncome <|-- Paycheck

    class SimpleExpenseAccount
    ATransfer <|-- SimpleExpenseAccount
    IBasicAccount <-- SimpleExpenseAccount

    class YearlyExpense
    SimpleExpenseAccount <|-- YearlyExpense

    class AccountController {
    + AccountMap: map[string -> IBasicAccount]
    + ExpenseMap: map[string -> ATransfer]
    + Accounts: set[string]
    + MonthlyExpenses: set[string]
    + Expenses: IAccountable[]
    + last_update: timestamp

    + to_xml(path: filepath)
    + from_xml(path: filepath)
    + update_recurrences()
    + add_expense(expense: ATransfer)
    + add_receipt(r: AReceipt)
    + add_account(name: string, acct: IBasicAccount)
    + remove_account(name: string)
    + update_account(name: string, acct: IBasicAccount)
    + update_expense(name: string, exp: ATransfer)
    + remove_expense(name: string)
    + remove_receipt(r: AReceipt)
    }
}
@enduml